

2017-03-23 13:49                 reed-solomon.cpp                 Page 1


#				    	
/* Initialize a RS codec	    		     generator [j] = my
 *				    			    generator [
 * Copyright 2002 Phil Karn, KA9Q   			    myGalois. p
 * May be used under the terms of t 	
 */				    		  }
#include	<stdio.h>	    		  else {
#include	"reed-solomon.h"    		     generator [j] = ge
#include	<string.h>	    		  }
				    	   }
/*				    
 *	Reed-Solomon decoder	    /*	rsHandle -> genpoly [0] can
 *	Copyright 2002 Phil Karn, K 	   generator [0] =
 *	May be used under the terms 		       myGalois. power2
 */				    			    myGalois. m
/*				    				      m
 *	Rewritten - and slightly ad 	}
 *	as a C++ class for use in t 	for (i = 0; i <= nroots; i
 *	Copyright 2015 Jan van Katw 	   generator [i] = myGalois
 *	May be used under the terms }
 */				    
#define	min(a,b)	((a) < (b)	    	reedSolomon::~reedSolomon
				    	delete generator;
/* Initialize a Reed-Solomon codec  }
 * symsize = symbol size, bits (1-8 
 * gfpoly = Field generator polynom //
 * fcr = first root of RS code gene //	Basic encoder, returns - in
 * prim = primitive element to gene void	reedSolomon::encode_rs (con
 * nroots = RS code generator polyn int i, j;
 */				    uint8_t feedback;
				    
	reedSolomon::reedSolomon (u 	memset (bb, 0, nroots * siz
				  u 
				  u 	for (i = 0; i < codeLength
				  u 	   feedback = myGalois. pol
				  u 				   myGa
					    	   if (feedback != codeLeng
int i, j, root, iprim;		    		  for (j = 1; j < nroot
				    		     bb [j] = myGalois.
	this	-> symsize 	= s 				  myGal
	this	-> codeLength	= ( 				     my
	this	-> fcr		= f 	
	this	-> prim		= p 	   }
	this	-> nroots	= n /*	Shift */
	for (iprim = 1; (iprim % pr 	   memmove (&bb [0], &bb[1]
	this -> iprim = iprim / pri 	   if (feedback != codeLeng
	this	-> generator	= n 		  bb [nroots - 1] =
	memset (generator, 0, (nroo 		      myGalois. power2p
	generator [0] = 1;	    			     myGalois.
				    	
	for (i = 0, root = fcr * pr 	   else
	   generator [i + 1] = 1;   		  bb [nroots - 1] = 0;
	   for (j = i; j > 0; j--){ 	}
	      if (generator [j] !=	    }
		 uint16_t p1 = myGa 
					    void	reedSolomon::enc (const uin







2017-03-23 13:49                 reed-solomon.cpp                 Page 2


uint8_t rf [codeLength];	     *	num1 = omega (inv (X (l))),
uint8_t bb [nroots];		     *	num2 = inv (X (l))**(FCR-1)
int16_t i;			     *	den = lambda_pr(inv(X(l)))
				     */
	memset (rf, 0, cutlen * siz 	uint16_t num1, num2, den;
	for (i = cutlen; i < codeLe 	int16_t j;
	   rf [i] = r[i - cutlen];  	for (j = rootCount - 1; j >
				    	   num1 = 0;
	encode_rs (rf, bb);	    	   for (i = omega_degree; i
	for (i = cutlen; i < codeLe 		  if (omega [i] != code
	   d [i - cutlen] = rf [i]; 		     uint16_t tmp = myG
//	and the parity bytes	    	
	for (i = 0; i < nroots; i + 		     num1	= myGalois.
	   d [codeLength - cutlen - 	
}				    		  }
				    	   }
				    	   uint16_t tmp = myGalois.
int16_t	reedSolomon::dec (const uin 	
uint8_t rf [codeLength];	    	
int16_t i;			    	
int16_t	ret;			    	
				    	   num2	= myGalois. power2p
	memset (rf, 0, cutlen * siz 	   den = 0;
	for (i = cutlen; i < codeLe /*
	   rf [i] = r [i - cutlen];  *	lambda [i + 1] for i even i
				     *	lambda_pr of lambda [i]
	ret = decode_rs (rf);	     */
	for (i = cutlen; i < codeLe 	   for (i = min (lambda_deg
	   d [i - cutlen] = rf [i]; 			     i >= 0; i
	return ret;		    		  if (Lambda [i + 1] !=
}				    		     uint16_t tmp = myG
				    	
int16_t	reedSolomon::decode_rs (uin 		     den	= myGalois.
uint8_t syndromes [nroots];	    		  }
uint8_t Lambda		[nroots + 1];	    	   }
uint16_t lambda_degree, omega_degre 
uint8_t	rootTable [nroots];	    	   if (den == 0) {
uint8_t	locTable	 [nroots];	    //		    fprintf (stderr, "den
uint8_t	omega	  [nroots + 1];	    		  return -1;
int16_t	rootCount;		    	   }
int16_t	i;			    /*	Apply error to data */
//				    	   if (num1 != 0) {
//	returning syndromes in poly 		  if (locTable [j] >=
	if (computeSyndromes (data, 		     rootCount --;
	   return 0;		    		  else {
//	Step 2: Berlekamp-Massey    		     uint16_t tmp1	= c
//	Lambda in power notation    		     uint16_t tmp2	= m
	lambda_degree = computeLamb 	
				    	
//	Step 3: evaluate lambda and 		     tmp2		= m
	rootCount = computeErrors ( 		     uint16_t corr	= m
	if (rootCount < 0)	    		     data [locTable [j]
	   return -1;		    				     my
	omega_degree = computeOmega 		  }
/*				     		}
 *	Compute error values in pol 	







2017-03-23 13:49                 reed-solomon.cpp                 Page 3


 	}			    	Lambda	[0]	= 1;
	return rootCount;	    	Corrector [1]	= 1;
}				    //
//				    	while (K <= nroots) {
//	Apply Horner on the input f 	   uint8_t oldLambda [nroot
uint8_t	reedSolomon::getSyndrome (u 	   memcpy (oldLambda, Lambd
uint8_t	syn	= data [0];	    //
int16_t j;			    //	Compute new lambda
				    	   for (i = 0; i < nroots +
	for (j = 1; j < codeLength; 		  Lambda [i] = myGalois
	   if (syn == 0)	    	
	      syn = data [j];	    	
	   else {		    	   if ((2 * L < K) && (erro
	      uint16_t uu1 = myGalo 		  L = K - L;
					    		  for (i = 0; i < nroot
					    		     Corrector [i] = my
	      syn = myGalois. add_p 	   }
			      myGal //
					    //	multiply x * C (x), i.e. sh
					    	   for (i = nroots; i >= 1;
//					    		  Corrector [i] = Corre
	   }			    	   Corrector [0] = 0;
	}			    
	return syn;		    //	and compute a new error
}				    	   error	= syndromes
				    	   for (i = 1; i <= K; i ++
//				    		  error = myGalois. add
//	use Horner to compute the s 	
bool	reedSolomon::computeSyndrom 	
int16_t i;			    	   }
uint16_t syn_error;		    	   K += 1;
				     	} // end of Berlekamp loop
/* form the syndromes; i.e., evalua 
				    	for (i = 0; i < nroots + 1;
	for (i = 0; i < nroots; i++ 	   if (Lambda [i] != 0)
	   syndromes [i] = getSyndr 		  deg_lambda = i;
	   syn_error |= syndromes [ 	   Lambda [i] = myGalois. p
	}			    	}
				    	return deg_lambda;
	return syn_error == 0;	    }
}				    //
//				    //	Compute the roots of lambda
//	compute Lambda with Berleka //	lambda polynome for all (in
//	syndromes in poly-form in,	    //	of the data (Chien search)
uint16_t reedSolomon::computeLambda int16_t  reedSolomon::computeErrors
uint16_t K = 1, L = 0;		    	
uint8_t Corrector	[nroots + 1 	
int16_t	 i;			    	
int16_t	deg_lambda;		    int16_t i, j, k;
				    int16_t rootCount = 0;
	for (i = 0; i < nroots + 1; //
	   Corrector [i] = Lambda [ 	uint8_t workRegister [nroot
				    	memcpy (&workRegister, Lamb
	uint8_t	error	= syndromes //
//				    //	reg is lambda in power nota
//	Initializers:			    	for (i = 1, k = iprim - 1;







2017-03-23 13:49                 reed-solomon.cpp                 Page 4


	     i <= codeLength; i ++, uint16_t reedSolomon::computeOmega
	   uint16_t result = 1;	//	    	
//	Note that for i + 1, the po 	
//	to be increased by "j".	    int16_t i, j;
	   for (j = deg_lambda; j > int16_t	deg_omega = 0;
	      if (workRegister [j]	    
		 workRegister [j] = 	for (i = 0; i < nroots; i++
					    	   uint16_t tmp = 0;
		 result = myGalois. 	   j = (deg_lambda < i) ? d
					    	   for (; j >= 0; j--){
					    		  if ((myGalois. poly2p
	      }			    		      (lambda [j] != co
	   }			    		     uint16_t res = myG
	   if (result != 0)	    	
	      continue;		    	
	   rootTable [rootCount] =	    	
	   locTable  [rootCount] =	    	
	   rootCount ++;	    		     tmp =  myGalois. a
	}			    		  }
	if (rootCount != deg_lambda 	   }
	   return -1;		    
	return rootCount;	    	   if (tmp != 0)
}				    		  deg_omega = i;
				    	   omega [i] = myGalois. po
/*				    	}
 *	Compute error evaluator pol 
 *	omega(x) = s(x)*lambda(x) ( 	omega [nroots] = codeLength
 *	in power form, and  find de 	return deg_omega;
 *				    }
 *	Note that syndromes are in	    
 */
































2017-03-23 13:49                    galois.cpp                    Page 1


#				    
/*				    int	galois::modnn (int x){
 *    Copyright (C) 2010, 2011, 201 	while (x >= codeLength) {
 *    Jan van Katwijk (J.vanKatwijk 	   x -= codeLength;
 *    Lazy Chair Programming	    	   x = (x >> mm) + (x & cod
 *				    	}
 *    This file is part of the SDR- 	return x;
 *    Many of the ideas as implemen }
 *    other work, made available th 
 *    All copyrights of the origina 		galois::~galois	(vo
 *				    	delete [] alpha_to;
 *    SDR-J is free software; you c 	delete [] index_of;
 *    it under the terms of the GNU }
 *    the Free Software Foundation; 
 *    (at your option) any later ve static inline
 *				    uint16_t	round_mod (int16_t
 *    SDR-J is distributed in the h 	return (a % n < 0) ? (a % n
 *    but WITHOUT ANY WARRANTY; wit }
 *    MERCHANTABILITY or FITNESS FO 
 *    GNU General Public License fo uint16_t	galois::add_poly
 *				    	return a ^ b;
 *    You should have received a co }
 *    along with SDR-J; if not, wri 
 *    Foundation, Inc., 59 Temple P uint16_t	galois::poly2power
 */				    	return index_of [a];
//				    }
//	Pretty straightforward pack 
//	up to 8 bits symsize	    uint16_t	galois::power2poly
				    	return alpha_to [a];
#include	"galois.h"	    }
#include	<stdio.h>	    
				    uint16_t	galois::add_power
		galois::galois (uin 	return index_of [alpha_to [
uint16_t sr;			    }
uint16_t i;			    
				    uint16_t	galois::multiply_po
	this	-> mm		= s 	return modnn (a + b);
	this	-> gfpoly	= g }
	this	-> codeLength	= ( 
	this	-> d_q		= 1 uint16_t	galois::multiply_po
	this	-> alpha_to	= n 	if ((a == 0) || (b == 0))
	this	-> index_of	= n 	   return 0;
/*	Generate Galois field looku 	return alpha_to [multiply_p
	index_of [0] = codeLength;  }
	alpha_to [codeLength] = 0;  
				    uint16_t	galois::divide_powe
	sr = 1;			    	return modnn (d_q - 1 + a -
	for (i = 0; i < codeLength; }
	   index_of [sr] = i;	    
	   alpha_to [i] = sr;	    uint16_t	galois::divide_poly
	   sr <<= 1;		    	if (a == 0)
	   if (sr & (1 << symsize)) 	   return 0;
	      sr ^= gfpoly;	    	return alpha_to [divide_pow
	   sr &= codeLength;	    }
	}			    
}				    uint16_t	galois::inverse_pol







2017-03-23 13:49                    galois.cpp                    Page 2


	return alpha_to [inverse_po 	return alpha_to [pow_power
}				    }
				    
uint16_t	galois::inverse_pow uint16_t	galois::pow_power (
	return d_q - 1 - a;	    	return (a == 0) ? 0 : (a *
}				    }
				    
uint16_t	galois::pow_poly (u





















































